export const data = {
  "key": "v-7e491ca2",
  "path": "/node_modules/shelljs/",
  "title": "ShellJS - Unix shell commands for Node.js",
  "lang": "en-US",
  "frontmatter": {},
  "excerpt": "",
  "headers": [
    {
      "level": 2,
      "title": "Command line use",
      "slug": "command-line-use",
      "children": []
    },
    {
      "level": 2,
      "title": "Plugin API",
      "slug": "plugin-api",
      "children": []
    },
    {
      "level": 2,
      "title": "A quick note about the docs",
      "slug": "a-quick-note-about-the-docs",
      "children": []
    },
    {
      "level": 2,
      "title": "Installing",
      "slug": "installing",
      "children": []
    },
    {
      "level": 2,
      "title": "Examples",
      "slug": "examples",
      "children": []
    },
    {
      "level": 2,
      "title": "Exclude options",
      "slug": "exclude-options",
      "children": []
    },
    {
      "level": 2,
      "title": "Global vs. Local",
      "slug": "global-vs-local",
      "children": []
    },
    {
      "level": 2,
      "title": "Command reference",
      "slug": "command-reference",
      "children": [
        {
          "level": 3,
          "title": "cat([options,] file [, file ...])",
          "slug": "cat-options-file-file",
          "children": []
        },
        {
          "level": 3,
          "title": "cat([options,] file_array)",
          "slug": "cat-options-file-array",
          "children": []
        },
        {
          "level": 3,
          "title": "cd([dir])",
          "slug": "cd-dir",
          "children": []
        },
        {
          "level": 3,
          "title": "chmod([options,] octal_mode || octal_string, file)",
          "slug": "chmod-options-octal-mode-octal-string-file",
          "children": []
        },
        {
          "level": 3,
          "title": "chmod([options,] symbolic_mode, file)",
          "slug": "chmod-options-symbolic-mode-file",
          "children": []
        },
        {
          "level": 3,
          "title": "cp([options,] source [, source ...], dest)",
          "slug": "cp-options-source-source-dest",
          "children": []
        },
        {
          "level": 3,
          "title": "cp([options,] source_array, dest)",
          "slug": "cp-options-source-array-dest",
          "children": []
        },
        {
          "level": 3,
          "title": "pushd([options,] [dir | '-N' | '+N'])",
          "slug": "pushd-options-dir-n-n",
          "children": []
        },
        {
          "level": 3,
          "title": "popd([options,] ['-N' | '+N'])",
          "slug": "popd-options-n-n",
          "children": []
        },
        {
          "level": 3,
          "title": "dirs([options | '+N' | '-N'])",
          "slug": "dirs-options-n-n",
          "children": []
        },
        {
          "level": 3,
          "title": "echo([options,] string [, string ...])",
          "slug": "echo-options-string-string",
          "children": []
        },
        {
          "level": 3,
          "title": "exec(command [, options] [, callback])",
          "slug": "exec-command-options-callback",
          "children": []
        },
        {
          "level": 3,
          "title": "find(path [, path ...])",
          "slug": "find-path-path",
          "children": []
        },
        {
          "level": 3,
          "title": "find(path_array)",
          "slug": "find-path-array",
          "children": []
        },
        {
          "level": 3,
          "title": "grep([options,] regex_filter, file [, file ...])",
          "slug": "grep-options-regex-filter-file-file",
          "children": []
        },
        {
          "level": 3,
          "title": "grep([options,] regex_filter, file_array)",
          "slug": "grep-options-regex-filter-file-array",
          "children": []
        },
        {
          "level": 3,
          "title": "head([{'-n': <num>},] file [, file ...])",
          "slug": "head-n-num-file-file",
          "children": []
        },
        {
          "level": 3,
          "title": "head([{'-n': <num>},] file_array)",
          "slug": "head-n-num-file-array",
          "children": []
        },
        {
          "level": 3,
          "title": "ln([options,] source, dest)",
          "slug": "ln-options-source-dest",
          "children": []
        },
        {
          "level": 3,
          "title": "ls([options,] [path, ...])",
          "slug": "ls-options-path",
          "children": []
        },
        {
          "level": 3,
          "title": "ls([options,] path_array)",
          "slug": "ls-options-path-array",
          "children": []
        },
        {
          "level": 3,
          "title": "mkdir([options,] dir [, dir ...])",
          "slug": "mkdir-options-dir-dir",
          "children": []
        },
        {
          "level": 3,
          "title": "mkdir([options,] dir_array)",
          "slug": "mkdir-options-dir-array",
          "children": []
        },
        {
          "level": 3,
          "title": "mv([options ,] source [, source ...], dest')",
          "slug": "mv-options-source-source-dest",
          "children": []
        },
        {
          "level": 3,
          "title": "mv([options ,] source_array, dest')",
          "slug": "mv-options-source-array-dest",
          "children": []
        },
        {
          "level": 3,
          "title": "pwd()",
          "slug": "pwd",
          "children": []
        },
        {
          "level": 3,
          "title": "rm([options,] file [, file ...])",
          "slug": "rm-options-file-file",
          "children": []
        },
        {
          "level": 3,
          "title": "rm([options,] file_array)",
          "slug": "rm-options-file-array",
          "children": []
        },
        {
          "level": 3,
          "title": "sed([options,] search_regex, replacement, file [, file ...])",
          "slug": "sed-options-search-regex-replacement-file-file",
          "children": []
        },
        {
          "level": 3,
          "title": "sed([options,] search_regex, replacement, file_array)",
          "slug": "sed-options-search-regex-replacement-file-array",
          "children": []
        },
        {
          "level": 3,
          "title": "set(options)",
          "slug": "set-options",
          "children": []
        },
        {
          "level": 3,
          "title": "sort([options,] file [, file ...])",
          "slug": "sort-options-file-file",
          "children": []
        },
        {
          "level": 3,
          "title": "sort([options,] file_array)",
          "slug": "sort-options-file-array",
          "children": []
        },
        {
          "level": 3,
          "title": "tail([{'-n': <num>},] file [, file ...])",
          "slug": "tail-n-num-file-file",
          "children": []
        },
        {
          "level": 3,
          "title": "tail([{'-n': <num>},] file_array)",
          "slug": "tail-n-num-file-array",
          "children": []
        },
        {
          "level": 3,
          "title": "tempdir()",
          "slug": "tempdir",
          "children": []
        },
        {
          "level": 3,
          "title": "test(expression)",
          "slug": "test-expression",
          "children": []
        },
        {
          "level": 3,
          "title": "ShellString.prototype.to(file)",
          "slug": "shellstring-prototype-to-file",
          "children": []
        },
        {
          "level": 3,
          "title": "ShellString.prototype.toEnd(file)",
          "slug": "shellstring-prototype-toend-file",
          "children": []
        },
        {
          "level": 3,
          "title": "touch([options,] file [, file ...])",
          "slug": "touch-options-file-file",
          "children": []
        },
        {
          "level": 3,
          "title": "touch([options,] file_array)",
          "slug": "touch-options-file-array",
          "children": []
        },
        {
          "level": 3,
          "title": "uniq([options,] [input, [output]])",
          "slug": "uniq-options-input-output",
          "children": []
        },
        {
          "level": 3,
          "title": "which(command)",
          "slug": "which-command",
          "children": []
        },
        {
          "level": 3,
          "title": "exit(code)",
          "slug": "exit-code",
          "children": []
        },
        {
          "level": 3,
          "title": "error()",
          "slug": "error",
          "children": []
        },
        {
          "level": 3,
          "title": "ShellString(str)",
          "slug": "shellstring-str",
          "children": []
        },
        {
          "level": 3,
          "title": "env['VAR_NAME']",
          "slug": "env-var-name",
          "children": []
        },
        {
          "level": 3,
          "title": "Pipes",
          "slug": "pipes",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "Configuration",
      "slug": "configuration",
      "children": [
        {
          "level": 3,
          "title": "config.silent",
          "slug": "config-silent",
          "children": []
        },
        {
          "level": 3,
          "title": "config.fatal",
          "slug": "config-fatal",
          "children": []
        },
        {
          "level": 3,
          "title": "config.verbose",
          "slug": "config-verbose",
          "children": []
        },
        {
          "level": 3,
          "title": "config.globOptions",
          "slug": "config-globoptions",
          "children": []
        },
        {
          "level": 3,
          "title": "config.reset()",
          "slug": "config-reset",
          "children": []
        }
      ]
    },
    {
      "level": 2,
      "title": "Team",
      "slug": "team",
      "children": []
    }
  ],
  "git": {
    "updatedTime": null
  },
  "filePathRelative": "node_modules/shelljs/README.md"
}

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
